{"version":3,"sources":["webpack:///../ui/src/components/hexagon/Hexagon.tsx","webpack:///../ui/src/components/typography/H2.tsx","webpack:///../ui/src/components/typography/H1.tsx","webpack:///./src/pages/blog/index.tsx"],"names":["HexagonContainer","styled","div","p","size","Math","sqrt","HexagonPiece","theme","colors","color","primary","index","Hexagon","layers","className","defaultLayer","innerPiece","border","InnerLayer","slice","H2Styled","h2","props","font","family","sizes","px36","weights","medium","secondary","spaces","px0","children","H1Styled","h1","px48","H1","GridStyled","Grid","px24","H1Subtitle","SpanText","px12","PostLinkStyled","Link","H2","HexagonStyled","query","withGlobalStyles","withNavbar","blogPosts","data","allMarkdownRemark","edges","style","display","alignItems","map","post","node","key","id","to","fields","slug","frontmatter","title","tags","tag","date","timeToRead","description"],"mappings":"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","file":"component---src-pages-blog-index-tsx-f7e1845d912b0986fb53.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { ColorKeys } from '../../theme/colors';\n\ntype Layer = { color: ColorKeys; innerPiece?: (index: number) => React.ReactElement; border?: number };\n\ninterface HexagonProps {\n  size: number;\n  layers?: (ColorKeys | Layer)[];\n  className?: string;\n  getInsidePiece?: (index: number) => React.ReactElement;\n}\n\nconst HexagonContainer = styled.div<HexagonProps>`\n  height: ${p => p.size}px;\n  width: ${p => (p.size * Math.sqrt(3))/2}px;\n  position: relative;\n`;\n\ninterface HexagonPieceProps {\n  index: number;\n  color: ColorKeys;\n  size: number;\n}\n\nconst HexagonPiece = styled.div<HexagonPieceProps>`\n  height: ${p => p.size/2}px;\n  width: ${p => (p.size * Math.sqrt(3))/2}px;\n  position: absolute;\n  background-color: ${p => p.theme.colors[p.color] || p.theme.colors.primary};\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) ${p => `rotate(${p.index * 60}deg)`};\n  overflow: hidden;\n`;\n\nconst Hexagon: React.FC<HexagonProps> = ({ size, layers, className }) => {\n  const defaultLayer = { color: layers[0], innerPiece: (): null => null, border: 18 };\n  const { color, innerPiece } = typeof layers[0] === 'object' ? { ...defaultLayer, ...layers[0] } : defaultLayer;\n  return (\n    <div className={className}>\n      <HexagonContainer size={size}>\n        <HexagonPiece size={size} index={0} color={color as ColorKeys}>{innerPiece(0)}</HexagonPiece>\n        <HexagonPiece size={size} index={1} color={color as ColorKeys}>{innerPiece(1)}</HexagonPiece>\n        <HexagonPiece size={size} index={2} color={color as ColorKeys}>{innerPiece(2)}</HexagonPiece>\n        {layers[1] && <InnerLayer\n          size={size - ((layers[1] as Layer).border || 18)}\n          layers={layers.slice(1)}\n        />}\n      </HexagonContainer>\n    </div>\n  );\n};\n\nconst InnerLayer = styled(Hexagon)`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n\nexport default Hexagon;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst H2Styled = styled.h2`\n  font-family: ${props =>\n    props.theme.font.family.primary};\n  font-size: ${props =>\n    props.theme.font.sizes.px36};\n  font-weight: ${props =>\n    props.theme.font.weights.medium};\n  color: ${props =>\n    props.theme.colors.secondary};\n  margin: ${props =>\n    props.theme.spaces.px0};\n`;\n\ninterface H2Props {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst H2: React.FC<H2Props> = ({\n  children,\n  className\n}) => {\n  return (\n    <H2Styled className={className}>\n      {children}\n    </H2Styled>\n  );\n};\n\nexport default styled(H2)``;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst H1Styled = styled.h1`\n  font-family: ${props =>\n    props.theme.font.family.primary};\n  font-size: ${props =>\n    props.theme.font.sizes.px48};\n  font-weight: ${props =>\n    props.theme.font.weights.medium};\n  color: ${props =>\n    props.theme.colors.primary};\n  margin: ${props =>\n    props.theme.spaces.px36} 0;\n`;\n\ninterface H1Props {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst H1: React.FC<H1Props> = ({\n  children, className\n}) => {\n  return (\n    <H1Styled className={className}>\n      {children}\n    </H1Styled>\n  );\n};\n\nexport default H1;\n","import React from 'react';\nimport { Grid, CenterSingleColumn } from '@saulo.dev/ui/src/components/layout/Grid';\nimport styled from 'styled-components';\nimport H1 from '@saulo.dev/ui/src/components/typography/H1';\nimport Helmet from 'react-helmet';\nimport SpanText from '@saulo.dev/ui/src/components/typography/SpanText';\nimport H2 from '@saulo.dev/ui/src/components/typography/H2';\nimport { graphql, Link } from 'gatsby';\nimport Hexagon from '@saulo.dev/ui/src/components/hexagon/Hexagon';\nimport withNavbar from '../../hocs/withNavbar';\nimport withGlobalStyles from '@saulo.dev/ui/src/services/withGlobalStyles';\nimport { BlogHomePageQuery } from '../../../types/graphql-types';\n\nconst GridStyled = styled(Grid)`\n  padding: ${p => p.theme.spaces.px24};\n`;\n\nconst H1Subtitle = styled(SpanText)`\n  display: block;\n  margin-top: ${p => p.theme.spaces.px12};\n`;\n\nconst PostLinkStyled = styled(Link)`\n  :link {\n    text-decoration: none;\n  }\n  ${H2} {\n    cursor: pointer;\n    :hover {\n      text-decoration: underline;\n    }\n  }\n`;\n\nconst HexagonStyled = styled(Hexagon)`\n  margin-left: 0.5em;\n`;\n\ninterface BlogPage {\n  data: BlogHomePageQuery;\n  location: Location;\n}\n\nconst BlogPage: React.FC<BlogPage> = ({ data }) => {\n  const blogPosts = data.allMarkdownRemark.edges;\n\n  return (\n    <>\n      <Helmet>\n        <title>{'\\u2B22 \\u2B21'}</title>\n      </Helmet>\n      <GridStyled>\n        <CenterSingleColumn>\n          <H1>\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n              {'A place to reflect  '}\n              <HexagonStyled layers={['primaryAccessory', { color: 'primary', border: 8 }, { color: 'primaryAccessory', border: 8 }]} size={48}/>\n            </div>\n            <H1Subtitle color=\"neutral\" size=\"px16\">\n              This is where I talk about stuff. Maybe itâ€™s about me, maybe its a curated list of something, sometimes about tech\n            </H1Subtitle>\n          </H1>\n          {\n            blogPosts.map(({ node: post }) => {\n              return (\n                <div key={post.id}>\n                  <PostLinkStyled to={post.fields.slug}><H2>{post.frontmatter.title}</H2></PostLinkStyled>\n                  <div>\n                    {post.frontmatter.tags.map(tag => <SpanText key={tag} color=\"secondaryAccessory\" size=\"px16\"> #{tag} </SpanText>)}\n                  </div>\n                  <div>\n                    <SpanText color=\"highlight1\" size=\"px12\">Posted {post.frontmatter.date} - {post.timeToRead} min read </SpanText>\n                  </div>\n                  <div>\n                    <SpanText color=\"neutral\" size=\"px16\">{post.frontmatter.description}</SpanText>\n                  </div>\n                </div>\n              );\n            })\n          }\n        </CenterSingleColumn>\n      </GridStyled>\n    </>\n\n  );\n};\n\nexport const query = graphql`\n  query BlogHomePage {\n    allMarkdownRemark {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            description\n            date(formatString: \"DD MMMM, YYYY\")\n            tags\n          }\n          fields {\n            slug\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`;\n\nexport default withGlobalStyles(withNavbar(BlogPage));\n"],"sourceRoot":""}