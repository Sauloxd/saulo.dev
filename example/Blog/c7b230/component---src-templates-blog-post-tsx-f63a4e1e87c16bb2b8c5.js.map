{"version":3,"sources":["webpack:///../ui/src/components/typography/H3.tsx","webpack:///./src/templates/blog-post.tsx","webpack:///../ui/src/components/typography/H2.tsx","webpack:///../ui/src/components/typography/H1.tsx"],"names":["H3Styled","styled","h3","props","theme","font","family","primary","sizes","px24","weights","medium","colors","secondaryAccessory","spaces","px0","H3","children","GridStyled","Grid","p","PageTitle","H1","PostContainer","div","px36","Strong","SpanText","color","fontWeight","elementComponentMap","h1","H2","h2","size","code","strong","em","blockquote","typeComponentMap","root","Fragment","text","Text","childrenIsStringBelieveIt","style","marginTop","byLinebreak","split","length","key","withSoftLine","reduce","withLineBreak","item","index","array","concat","map","line","query","withGlobalStyles","withNavbar","post","data","markdownRemark","Helmet","frontmatter","title","id","tags","tag","date","timeToRead","handleHtmlAst","htmlAst","type","value","tagName","Component","child","H2Styled","secondary","className","H1Styled","px48"],"mappings":"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","file":"component---src-templates-blog-post-tsx-f63a4e1e87c16bb2b8c5.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst H3Styled = styled.h3`\n  font-family: ${props =>\n    props.theme.font.family.primary};\n  font-size: ${props =>\n    props.theme.font.sizes.px24};\n  font-weight: ${props =>\n    props.theme.font.weights.medium};\n  color: ${props =>\n    props.theme.colors.secondaryAccessory};\n  margin: ${props =>\n    props.theme.spaces.px0};\n`;\n\ninterface H3Props {\n  children: React.ReactNode;\n}\n\nconst H3: React.FC<H3Props> = ({\n  children\n}) => {\n  return (\n    <H3Styled>\n      {children}\n    </H3Styled>\n  );\n};\n\nexport default H3;\n","import React, { Fragment } from 'react';\nimport { Grid, CenterSingleColumn } from '@saulo.dev/ui/src/components/layout/Grid';\nimport styled from 'styled-components';\nimport Helmet from 'react-helmet';\nimport { graphql } from 'gatsby';\nimport H1 from '@saulo.dev/ui/src/components/typography/H1';\nimport H2 from '@saulo.dev/ui/src/components/typography/H2';\nimport SpanText from '@saulo.dev/ui/src/components/typography/SpanText';\nimport withNavbar from '../hocs/withNavbar';\nimport withGlobalStyles from '@saulo.dev/ui/src/services/withGlobalStyles';\nimport H3 from '@saulo.dev/ui/src/components/typography/H3';\nimport { BlogPostQuery } from '../../types/graphql-types';\n\nconst GridStyled = styled(Grid)`\n  padding: ${p => p.theme.spaces.px24};\n`;\n\nconst PageTitle = styled(H1)`\n  margin-bottom: 0;\n`;\n\nconst PostContainer = styled.div`\n  margin-top: ${p => p.theme.spaces.px24};\n  margin-bottom: ${p => p.theme.spaces.px36};\n`;\n\nconst P: React.FC = ({ children }) => <SpanText color=\"neutral\" size=\"px16\">{children}</SpanText>;\nconst Code: React.FC = ({ children }) => <SpanText color=\"highlight2\" size=\"px16\">{children}</SpanText>;\nconst Strong: React.FC = ({ children }) => <SpanText color=\"primaryAccessory\" fontWeight=\"bold\">{children}</SpanText>;\nconst Italic: React.FC = ({ children }) => <em><SpanText color=\"highlight1\">{children}</SpanText></em>;\n\nconst elementComponentMap = {\n  h1: H2,\n  h2: H3,\n  p: P,\n  code: Code,\n  strong: Strong,\n  em: Italic,\n  blockquote: Strong\n};\n\nconst zipWithLineSoftBreak = (array: string[]) => array.reduce((withLineBreak, item, index, array) => {\n  if (array.length === index + 1) return withLineBreak.concat(item);\n  return withLineBreak.concat(item).concat('softbreak');\n}, []);\n\nconst Text: React.FC = ({ children }) => {\n  const childrenIsStringBelieveIt = children as string;\n  if (children === '\\n') return <div style={{ marginTop: 16 }} />;\n  const byLinebreak = childrenIsStringBelieveIt.split('\\n');\n  if (byLinebreak.length === 1) return <span key={childrenIsStringBelieveIt}>{childrenIsStringBelieveIt}</span>;\n  const withSoftLine = zipWithLineSoftBreak(byLinebreak);\n  return (\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    <>\n      {withSoftLine.map((line, index) => {\n        if (line === 'softbreak') return <div key={index} />;\n        return <Text key={line}>{line}</Text>;\n      })}\n    </>\n  );\n};\n\nconst typeComponentMap = {\n  root: Fragment,\n  text: Text\n};\n\ninterface HtmlAst {\n  type: 'root' | 'text';\n  children: HtmlAst[];\n  value: string;\n  tagName: 'h1'| 'h2'| 'p'| 'code'| 'strong'| 'em'| 'blockquote';\n}\n\nconst handleHtmlAst = (htmlAst: HtmlAst, key: string | number) => {\n  const { type, children, value, tagName } = htmlAst;\n\n  const Component = tagName ? elementComponentMap[tagName] : typeComponentMap[type];\n\n  if (!children || children.length === 0) {\n    return <Component key={key}>{value}</Component>;\n  }\n\n  return (\n    <Component key={key}>\n      {children.map((child, index) => handleHtmlAst(child, index))}\n    </Component>\n  );\n};\n\ninterface BlogPostPage {\n  data: BlogPostQuery;\n  location?: Location;\n}\n\nconst BlogPostPage: React.FC<BlogPostPage> = ({ data }) => {\n  const post = data.markdownRemark;\n  return (\n    <>\n      <Helmet>\n        <title> Blog - {post.frontmatter.title}</title>\n      </Helmet>\n      <GridStyled>\n        <CenterSingleColumn>\n          <div key={post.id}>\n            <PageTitle>{post.frontmatter.title}</PageTitle>\n            <div>\n              {post.frontmatter.tags.map(tag => <SpanText key={tag} color=\"secondaryAccessory\" size=\"px16\"> #{tag} </SpanText>)}\n            </div>\n            <div>\n              <SpanText color=\"highlight1\" size=\"px12\">Posted {post.frontmatter.date} - {post.timeToRead} min read </SpanText>\n            </div>\n          </div>\n          <PostContainer>\n            {handleHtmlAst(post.htmlAst, 'root')}\n          </PostContainer>\n        </CenterSingleColumn>\n      </GridStyled>\n    </>\n\n  );\n};\n\nexport default withGlobalStyles(withNavbar(BlogPostPage));\n\nexport const query = graphql`\n  query BlogPost($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      htmlAst\n      frontmatter {\n        title\n        description\n        date(formatString: \"DD MMMM, YYYY\")\n        tags\n      }\n      timeToRead\n    }\n  }\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst H2Styled = styled.h2`\n  font-family: ${props =>\n    props.theme.font.family.primary};\n  font-size: ${props =>\n    props.theme.font.sizes.px36};\n  font-weight: ${props =>\n    props.theme.font.weights.medium};\n  color: ${props =>\n    props.theme.colors.secondary};\n  margin: ${props =>\n    props.theme.spaces.px0};\n`;\n\ninterface H2Props {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst H2: React.FC<H2Props> = ({\n  children,\n  className\n}) => {\n  return (\n    <H2Styled className={className}>\n      {children}\n    </H2Styled>\n  );\n};\n\nexport default styled(H2)``;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst H1Styled = styled.h1`\n  font-family: ${props =>\n    props.theme.font.family.primary};\n  font-size: ${props =>\n    props.theme.font.sizes.px48};\n  font-weight: ${props =>\n    props.theme.font.weights.medium};\n  color: ${props =>\n    props.theme.colors.primary};\n  margin: ${props =>\n    props.theme.spaces.px36} 0;\n`;\n\ninterface H1Props {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst H1: React.FC<H1Props> = ({\n  children, className\n}) => {\n  return (\n    <H1Styled className={className}>\n      {children}\n    </H1Styled>\n  );\n};\n\nexport default H1;\n"],"sourceRoot":""}