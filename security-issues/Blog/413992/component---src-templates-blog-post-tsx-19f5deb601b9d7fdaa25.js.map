{"version":3,"file":"component---src-templates-blog-post-tsx-19f5deb601b9d7fdaa25.js","mappings":"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","sources":["webpack://@saulo.dev/blog/../ui/src/components/typography/H3.tsx","webpack://@saulo.dev/blog/./src/templates/blog-post.tsx","webpack://@saulo.dev/blog/../ui/src/components/typography/H1.tsx","webpack://@saulo.dev/blog/../ui/src/components/typography/H2.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst H3Styled = styled.h3`\n  font-family: ${props =>\n    props.theme.font.family.primary};\n  font-size: ${props =>\n    props.theme.font.sizes.px24};\n  font-weight: ${props =>\n    props.theme.font.weights.medium};\n  color: ${props =>\n    props.theme.colors.secondaryAccessory};\n  margin: ${props =>\n    props.theme.spaces.px0};\n`;\n\ninterface H3Props {\n  children: React.ReactNode;\n}\n\nconst H3: React.FC<H3Props> = ({\n  children\n}) => {\n  return (\n    <H3Styled>\n      {children}\n    </H3Styled>\n  );\n};\n\nexport default H3;\n","import React, { Fragment } from 'react';\nimport {\n  Grid,\n  CenterSingleColumn,\n} from '@saulo.dev/ui/src/components/layout/Grid';\nimport styled from 'styled-components';\nimport Helmet from 'react-helmet';\nimport { graphql } from 'gatsby';\nimport H1 from '@saulo.dev/ui/src/components/typography/H1';\nimport H2 from '@saulo.dev/ui/src/components/typography/H2';\nimport SpanText from '@saulo.dev/ui/src/components/typography/SpanText';\nimport withNavbar from '../hocs/withNavbar';\nimport withGlobalStyles from '@saulo.dev/ui/src/services/withGlobalStyles';\nimport H3 from '@saulo.dev/ui/src/components/typography/H3';\nimport { BlogPostQuery } from '../../types/graphql-types';\n\nconst GridStyled = styled(Grid)`\n  padding: ${(p) => p.theme.spaces.px24};\n`;\nconst PageTitle = styled(H1)`\n  margin-bottom: 0;\n`;\nconst PostContainer = styled.div`\n  margin-top: ${(p) => p.theme.spaces.px24};\n  margin-bottom: ${(p) => p.theme.spaces.px36};\n`;\nconst P: React.FC = ({ children }) => (\n  <SpanText color=\"neutral\" size=\"px16\">\n    {children}\n  </SpanText>\n);\nconst Code: React.FC = ({ children }) => (\n  <SpanText color=\"highlight2\" size=\"px16\">\n    {children}\n  </SpanText>\n);\nconst Strong: React.FC = ({ children }) => (\n  <SpanText color=\"primaryAccessory\" fontWeight=\"bold\">\n    {children}\n  </SpanText>\n);\nconst Italic: React.FC = ({ children }) => (\n  <em>\n    <SpanText color=\"highlight1\">{children}</SpanText>\n  </em>\n);\nconst elementComponentMap = {\n  h1: H2,\n  h2: H3,\n  p: P,\n  code: Code,\n  strong: Strong,\n  em: Italic,\n  blockquote: Strong,\n};\nconst zipWithLineSoftBreak = (array: string[]) =>\n  array.reduce((withLineBreak, item, index, array) => {\n    if (array.length === index + 1) return withLineBreak.concat(item);\n\n    return withLineBreak.concat(item).concat('softbreak');\n  }, []);\nconst Text: React.FC = ({ children }) => {\n  const childrenIsStringBelieveIt = children as string;\n  if (children === '\\n') return <div style={{ marginTop: 16 }} />;\n  const byLinebreak = childrenIsStringBelieveIt.split('\\n');\n  if (byLinebreak.length === 1)\n    return (\n      <span key={childrenIsStringBelieveIt}>{childrenIsStringBelieveIt}</span>\n    );\n  const withSoftLine = zipWithLineSoftBreak(byLinebreak);\n\n  return (\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    <>\n      {withSoftLine.map((line, index) => {\n        if (line === 'softbreak') return <div key={index} />;\n\n        return <Text key={line}>{line}</Text>;\n      })}\n    </>\n  );\n};\nconst typeComponentMap = {\n  root: Fragment,\n  text: Text,\n};\n\ninterface HtmlAst {\n  type: 'root' | 'text';\n  children: HtmlAst[];\n  value: string;\n  tagName: 'h1' | 'h2' | 'p' | 'code' | 'strong' | 'em' | 'blockquote';\n}\n\nconst handleHtmlAst = (htmlAst: HtmlAst, key: string | number) => {\n  const { type, children, value, tagName } = htmlAst;\n  const Component = tagName\n    ? elementComponentMap[tagName]\n    : typeComponentMap[type];\n\n  if (!children || children.length === 0) {\n    return <Component key={key}>{value}</Component>;\n  }\n\n  return (\n    <Component key={key}>\n      {children.map((child, index) => handleHtmlAst(child, index))}\n    </Component>\n  );\n};\n\ninterface BlogPostPage {\n  data: BlogPostQuery;\n  location?: Location;\n}\n\nconst BlogPostPage: React.FC<BlogPostPage> = ({ data }) => {\n  const post = data.markdownRemark;\n\n  return (\n    <>\n      <Helmet>\n        <title> Blog - {post.frontmatter.title}</title>\n      </Helmet>\n      <GridStyled>\n        <CenterSingleColumn>\n          <div key={post.id}>\n            <PageTitle>{post.frontmatter.title}</PageTitle>\n            <div>\n              {post.frontmatter.tags.map((tag) => (\n                <SpanText key={tag} color=\"secondaryAccessory\" size=\"px16\">\n                  {' '}\n                  #{tag}{' '}\n                </SpanText>\n              ))}\n            </div>\n            <div>\n              <SpanText color=\"highlight1\" size=\"px12\">\n                Posted {post.frontmatter.date} - {post.timeToRead} min read{' '}\n              </SpanText>\n            </div>\n          </div>\n          <PostContainer>{handleHtmlAst(post.htmlAst, 'root')}</PostContainer>\n        </CenterSingleColumn>\n      </GridStyled>\n    </>\n  );\n};\n\nexport default withGlobalStyles(withNavbar(BlogPostPage));\n\nexport const query = graphql`\n  query BlogPost($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      htmlAst\n      frontmatter {\n        title\n        description\n        date(formatString: \"DD MMMM, YYYY\")\n        tags\n      }\n      timeToRead\n    }\n  }\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst H1Styled = styled.h1`\n  font-family: ${props =>\n    props.theme.font.family.primary};\n  font-size: ${props =>\n    props.theme.font.sizes.px48};\n  font-weight: ${props =>\n    props.theme.font.weights.medium};\n  color: ${props =>\n    props.theme.colors.primary};\n  margin: ${props =>\n    props.theme.spaces.px36} 0;\n`;\n\ninterface H1Props {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst H1: React.FC<H1Props> = ({\n  children, className\n}) => {\n  return (\n    <H1Styled className={className}>\n      {children}\n    </H1Styled>\n  );\n};\n\nexport default H1;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst H2Styled = styled.h2`\n  font-family: ${props =>\n    props.theme.font.family.primary};\n  font-size: ${props =>\n    props.theme.font.sizes.px36};\n  font-weight: ${props =>\n    props.theme.font.weights.medium};\n  color: ${props =>\n    props.theme.colors.secondary};\n  margin: ${props =>\n    props.theme.spaces.px0};\n`;\n\ninterface H2Props {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst H2: React.FC<H2Props> = ({\n  children,\n  className\n}) => {\n  return (\n    <H2Styled className={className}>\n      {children}\n    </H2Styled>\n  );\n};\n\nexport default styled(H2)``;\n"],"names":["H3Styled","styled","props","theme","font","family","primary","sizes","px24","weights","medium","colors","secondaryAccessory","spaces","px0","children","GridStyled","Grid","p","PageTitle","H1","PostContainer","px36","Strong","SpanText","color","fontWeight","elementComponentMap","h1","H2","h2","H3","size","code","strong","em","blockquote","typeComponentMap","root","Fragment","text","Text","childrenIsStringBelieveIt","style","marginTop","byLinebreak","split","length","key","withSoftLine","reduce","withLineBreak","item","index","array","concat","map","line","handleHtmlAst","htmlAst","type","value","tagName","Component","child","withGlobalStyles","withNavbar","post","data","markdownRemark","Helmet","frontmatter","title","id","tags","tag","date","timeToRead","H1Styled","px48","className","H2Styled","secondary"],"sourceRoot":""}