{"version":3,"file":"component---src-pages-blog-index-tsx-e7d14141cce928dc9d78.js","mappings":"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","sources":["webpack://@saulo.dev/blog/./src/pages/blog/index.tsx","webpack://@saulo.dev/blog/../ui/src/components/hexagon/Hexagon.tsx","webpack://@saulo.dev/blog/../ui/src/components/typography/H1.tsx","webpack://@saulo.dev/blog/../ui/src/components/typography/H2.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Grid,\n  CenterSingleColumn,\n} from '@saulo.dev/ui/src/components/layout/Grid';\nimport styled from 'styled-components';\nimport H1 from '@saulo.dev/ui/src/components/typography/H1';\nimport Helmet from 'react-helmet';\nimport SpanText from '@saulo.dev/ui/src/components/typography/SpanText';\nimport H2 from '@saulo.dev/ui/src/components/typography/H2';\nimport { graphql, Link } from 'gatsby';\nimport Hexagon from '@saulo.dev/ui/src/components/hexagon/Hexagon';\nimport withNavbar from '../../hocs/withNavbar';\nimport withGlobalStyles from '@saulo.dev/ui/src/services/withGlobalStyles';\nimport { BlogHomePageQuery } from '../../../types/graphql-types';\n\nconst GridStyled = styled(Grid)`\n  padding: ${(p) => p.theme.spaces.px24};\n`;\nconst H1Subtitle = styled(SpanText)`\n  display: block;\n  margin-top: ${(p) => p.theme.spaces.px12};\n`;\nconst PostLinkStyled = styled(Link)`\n  :link {\n    text-decoration: none;\n  }\n  ${H2} {\n    cursor: pointer;\n    :hover {\n      text-decoration: underline;\n    }\n  }\n`;\nconst HexagonStyled = styled(Hexagon)`\n  margin-left: 0.5em;\n`;\n\ninterface BlogPage {\n  data: BlogHomePageQuery;\n  location: Location;\n}\n\nconst BlogPage: React.FC<BlogPage> = ({ data }) => {\n  const blogPosts = data.allMarkdownRemark.edges;\n\n  return (\n    <>\n      <Helmet>\n        <title>{'\\u2B22 \\u2B21'}</title>\n      </Helmet>\n      <GridStyled>\n        <CenterSingleColumn>\n          <H1>\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n              {'A place to reflect  '}\n              <HexagonStyled\n                layers={[\n                  'primaryAccessory',\n                  { color: 'primary', border: 8 },\n                  { color: 'primaryAccessory', border: 8 },\n                ]}\n                size={48}\n              />\n            </div>\n            <H1Subtitle color=\"neutral\" size=\"px16\">\n              This is where I talk about stuff. Maybe itâ€™s about me, maybe its a\n              curated list of something, sometimes about tech\n            </H1Subtitle>\n          </H1>\n          {blogPosts.map(({ node: post }) => {\n            return (\n              <div key={post.id}>\n                <PostLinkStyled to={post.fields.slug}>\n                  <H2>{post.frontmatter.title}</H2>\n                </PostLinkStyled>\n                <div>\n                  {post.frontmatter.tags.map((tag) => (\n                    <SpanText key={tag} color=\"secondaryAccessory\" size=\"px16\">\n                      {' '}\n                      #{tag}{' '}\n                    </SpanText>\n                  ))}\n                </div>\n                <div>\n                  <SpanText color=\"highlight1\" size=\"px12\">\n                    Posted {post.frontmatter.date} - {post.timeToRead} min read{' '}\n                  </SpanText>\n                </div>\n                <div>\n                  <SpanText color=\"neutral\" size=\"px16\">\n                    {post.frontmatter.description}\n                  </SpanText>\n                </div>\n              </div>\n            );\n          })}\n        </CenterSingleColumn>\n      </GridStyled>\n    </>\n  );\n};\n\nexport const query = graphql`\n  query BlogHomePage {\n    allMarkdownRemark {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            description\n            date(formatString: \"DD MMMM, YYYY\")\n            tags\n          }\n          fields {\n            slug\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`;\n\nexport default withGlobalStyles(withNavbar(BlogPage));\n","import React from 'react';\nimport styled from 'styled-components';\nimport { ColorKeys } from '../../theme/colors';\n\ntype Layer = { color: ColorKeys; innerPiece?: (index: number) => React.ReactElement; border?: number };\n\ninterface HexagonProps {\n  size: number;\n  layers?: (ColorKeys | Layer)[];\n  className?: string;\n  getInsidePiece?: (index: number) => React.ReactElement;\n}\n\nconst HexagonContainer = styled.div<HexagonProps>`\n  height: ${p => p.size}px;\n  width: ${p => (p.size * Math.sqrt(3))/2}px;\n  position: relative;\n`;\n\ninterface HexagonPieceProps {\n  index: number;\n  color: ColorKeys;\n  size: number;\n}\n\nconst HexagonPiece = styled.div<HexagonPieceProps>`\n  height: ${p => p.size/2}px;\n  width: ${p => (p.size * Math.sqrt(3))/2}px;\n  position: absolute;\n  background-color: ${p => p.theme.colors[p.color] || p.theme.colors.primary};\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) ${p => `rotate(${p.index * 60}deg)`};\n  overflow: hidden;\n`;\n\nconst Hexagon: React.FC<HexagonProps> = ({ size, layers, className }) => {\n  const defaultLayer = { color: layers[0], innerPiece: (): null => null, border: 18 };\n  const { color, innerPiece } = typeof layers[0] === 'object' ? { ...defaultLayer, ...layers[0] } : defaultLayer;\n  return (\n    <div className={className}>\n      <HexagonContainer size={size}>\n        <HexagonPiece size={size} index={0} color={color as ColorKeys}>{innerPiece(0)}</HexagonPiece>\n        <HexagonPiece size={size} index={1} color={color as ColorKeys}>{innerPiece(1)}</HexagonPiece>\n        <HexagonPiece size={size} index={2} color={color as ColorKeys}>{innerPiece(2)}</HexagonPiece>\n        {layers[1] && <InnerLayer\n          size={size - ((layers[1] as Layer).border || 18)}\n          layers={layers.slice(1)}\n        />}\n      </HexagonContainer>\n    </div>\n  );\n};\n\nconst InnerLayer = styled(Hexagon)`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n\nexport default Hexagon;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst H1Styled = styled.h1`\n  font-family: ${props =>\n    props.theme.font.family.primary};\n  font-size: ${props =>\n    props.theme.font.sizes.px48};\n  font-weight: ${props =>\n    props.theme.font.weights.medium};\n  color: ${props =>\n    props.theme.colors.primary};\n  margin: ${props =>\n    props.theme.spaces.px36} 0;\n`;\n\ninterface H1Props {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst H1: React.FC<H1Props> = ({\n  children, className\n}) => {\n  return (\n    <H1Styled className={className}>\n      {children}\n    </H1Styled>\n  );\n};\n\nexport default H1;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst H2Styled = styled.h2`\n  font-family: ${props =>\n    props.theme.font.family.primary};\n  font-size: ${props =>\n    props.theme.font.sizes.px36};\n  font-weight: ${props =>\n    props.theme.font.weights.medium};\n  color: ${props =>\n    props.theme.colors.secondary};\n  margin: ${props =>\n    props.theme.spaces.px0};\n`;\n\ninterface H2Props {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst H2: React.FC<H2Props> = ({\n  children,\n  className\n}) => {\n  return (\n    <H2Styled className={className}>\n      {children}\n    </H2Styled>\n  );\n};\n\nexport default styled(H2)``;\n"],"names":["GridStyled","styled","Grid","p","theme","spaces","px24","H1Subtitle","SpanText","px12","PostLinkStyled","Link","H2","HexagonStyled","Hexagon","withGlobalStyles","withNavbar","blogPosts","data","allMarkdownRemark","edges","style","display","alignItems","layers","color","border","size","map","post","node","key","id","to","fields","slug","frontmatter","title","tags","tag","date","timeToRead","description","HexagonContainer","Math","sqrt","HexagonPiece","colors","primary","index","className","defaultLayer","innerPiece","InnerLayer","slice","H1Styled","props","font","family","sizes","px48","weights","medium","px36","children","H2Styled","secondary","px0"],"sourceRoot":""}